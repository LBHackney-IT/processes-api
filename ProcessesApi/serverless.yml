service: processes-api
provider:
  name: aws
  runtime: dotnetcore3.1
  memorySize: 2048
  tracing:
    lambda: true
    apiGateway: true
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2

plugins:
  - serverless-associate-waf
  - '@serverless/safeguards-plugin'

package:
  artifact: ./bin/release/netcoreapp3.1/processes-api.zip

functions:
  ProcessesApi:
    name: ${self:service}-${self:provider.stage}
    handler: ProcessesApi::ProcessesApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    environment:
      IncomeApiUrl: ${ssm:/housing-tl/${self:provider.stage}/income-api-url}
      IncomeApiToken: ${ssm:/manage-arrears/${self:provider.stage}/income-api-key}
    events:
      - http:
          path: /{proxy+}
          method: ANY
          authorizer:
            arn: ${ssm:/api-authenticator/${self:provider.stage}/arn}
            type: request
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            managedExternally: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - If-Match
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-correlation-id
            allowCredentials: false
      - http:
          path: /swagger/{proxy+}
          method: GET
          private: false
resources:
  Conditions:
    # Only create the Canaries for staging/prod
    IsProdDeployment:
      Fn::Equals:
        - ${self:provider.stage}
        - production
    IsStagingDeployment:
      Fn::Equals:
        - ${self:provider.stage}
        - staging
    # Check if deployment is staging or prod
    CreateCanary:
      Fn::Or:
        - Condition: IsStagingDeployment
        - Condition: IsProdDeployment
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        Policies:
          - PolicyName: dynamoDBAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:BatchGet*"
                    - "dynamodb:BatchWrite"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:DescribeStream"
                    - "dynamodb:DescribeTable"
                    - "dynamodb:Get*"
                    - "dynamodb:PutItem"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/Processes'
                - Effect: Allow
                  Action:
                    - "dynamodb:BatchGet*"
                    - "dynamodb:DescribeStream"
                    - "dynamodb:DescribeTable"
                    - "dynamodb:Get*"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/TenureInformation'
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/Persons'
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
    Canary:
      Type: AWS::Synthetics::Canary
      Condition: CreateCanary
      Properties:
        Name: processes-healthcheck #Update name accordingly, max 21 characters
        Code:
          Handler: pageLoadBlueprint.handler
          S3Bucket: lbh-cw-canaries-api-testing-script-${self:provider.stage}
          S3Key: cw-canary-api-test-script.zip
        ExecutionRoleArn:
          Fn::Join:
            - ':'
            - - 'arn:aws:iam:'
              - Ref: 'AWS::AccountId'
              - role/LBH_Canary_Role
        RuntimeVersion: syn-nodejs-puppeteer-3.1
        RunConfig:
          TimeoutInSeconds: 300
          EnvironmentVariables:
            hostname: ${self:custom.hostname}
            path: /${self:provider.stage}/api/v1/healthcheck/ping
            token: ${ssm:/housing-tl/${self:provider.stage}/processes-api-token} #Update value accordingly
        ArtifactS3Location:
          Fn::Join:
            - '-'
            - - s3://cw-syn-results
              - Ref: 'AWS::AccountId'
              - Ref: 'AWS::Region'
        StartCanaryAfterCreation: true
        Schedule:
          Expression: rate(5 minutes)
          DurationInSeconds: 0
custom:
  safeguards:
    - title: Require authorizer
      safeguard: require-authorizer
      path: ./policies
  associateWaf:
    name: ProcessApiWafAcl
    version: V2
  hostname:
    Fn::Join:
      - '.'
      - - Ref: ApiGatewayRestApi
        - execute-api
        - eu-west-2
        - amazonaws.com
  vpc:
    development:
      subnetIds:
        - subnet-0deabb5d8fb9c3446
        - subnet-000b89c249f12a8ad
    staging:
      subnetIds:
        - subnet-06d3de1bd9181b0d7
        - subnet-0ed7d7713d1127656
    production:
      subnetIds:
        - subnet-01d3657f97a243261
        - subnet-0b7b8fea07efabf34
